package com.huatec.edu.mobileshop.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.huatec.edu.mobileshop.db.WeatherEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEATHER_ENTITY".
*/
public class WeatherEntityDao extends AbstractDao<WeatherEntity, Integer> {

    public static final String TABLENAME = "WEATHER_ENTITY";

    /**
     * Properties of entity WeatherEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", true, "ID");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Sunrise = new Property(2, String.class, "sunrise", false, "SUNRISE");
        public final static Property High = new Property(3, String.class, "high", false, "HIGH");
        public final static Property Low = new Property(4, String.class, "low", false, "LOW");
        public final static Property Sunset = new Property(5, String.class, "sunset", false, "SUNSET");
        public final static Property Aqi = new Property(6, Double.class, "aqi", false, "AQI");
        public final static Property Ymd = new Property(7, String.class, "ymd", false, "YMD");
        public final static Property Week = new Property(8, String.class, "week", false, "WEEK");
        public final static Property Fx = new Property(9, String.class, "fx", false, "FX");
        public final static Property Fl = new Property(10, String.class, "fl", false, "FL");
        public final static Property Type = new Property(11, String.class, "type", false, "TYPE");
        public final static Property Notice = new Property(12, String.class, "notice", false, "NOTICE");
    }


    public WeatherEntityDao(DaoConfig config) {
        super(config);
    }
    
    public WeatherEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEATHER_ENTITY\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE\" TEXT," + // 1: date
                "\"SUNRISE\" TEXT," + // 2: sunrise
                "\"HIGH\" TEXT," + // 3: high
                "\"LOW\" TEXT," + // 4: low
                "\"SUNSET\" TEXT," + // 5: sunset
                "\"AQI\" REAL," + // 6: aqi
                "\"YMD\" TEXT," + // 7: ymd
                "\"WEEK\" TEXT," + // 8: week
                "\"FX\" TEXT," + // 9: fx
                "\"FL\" TEXT," + // 10: fl
                "\"TYPE\" TEXT," + // 11: type
                "\"NOTICE\" TEXT);"); // 12: notice
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEATHER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WeatherEntity entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String sunrise = entity.getSunrise();
        if (sunrise != null) {
            stmt.bindString(3, sunrise);
        }
 
        String high = entity.getHigh();
        if (high != null) {
            stmt.bindString(4, high);
        }
 
        String low = entity.getLow();
        if (low != null) {
            stmt.bindString(5, low);
        }
 
        String sunset = entity.getSunset();
        if (sunset != null) {
            stmt.bindString(6, sunset);
        }
 
        Double aqi = entity.getAqi();
        if (aqi != null) {
            stmt.bindDouble(7, aqi);
        }
 
        String ymd = entity.getYmd();
        if (ymd != null) {
            stmt.bindString(8, ymd);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(9, week);
        }
 
        String fx = entity.getFx();
        if (fx != null) {
            stmt.bindString(10, fx);
        }
 
        String fl = entity.getFl();
        if (fl != null) {
            stmt.bindString(11, fl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
 
        String notice = entity.getNotice();
        if (notice != null) {
            stmt.bindString(13, notice);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WeatherEntity entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String sunrise = entity.getSunrise();
        if (sunrise != null) {
            stmt.bindString(3, sunrise);
        }
 
        String high = entity.getHigh();
        if (high != null) {
            stmt.bindString(4, high);
        }
 
        String low = entity.getLow();
        if (low != null) {
            stmt.bindString(5, low);
        }
 
        String sunset = entity.getSunset();
        if (sunset != null) {
            stmt.bindString(6, sunset);
        }
 
        Double aqi = entity.getAqi();
        if (aqi != null) {
            stmt.bindDouble(7, aqi);
        }
 
        String ymd = entity.getYmd();
        if (ymd != null) {
            stmt.bindString(8, ymd);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(9, week);
        }
 
        String fx = entity.getFx();
        if (fx != null) {
            stmt.bindString(10, fx);
        }
 
        String fl = entity.getFl();
        if (fl != null) {
            stmt.bindString(11, fl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
 
        String notice = entity.getNotice();
        if (notice != null) {
            stmt.bindString(13, notice);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    @Override
    public WeatherEntity readEntity(Cursor cursor, int offset) {
        WeatherEntity entity = new WeatherEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sunrise
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // high
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // low
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sunset
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // aqi
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ymd
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // week
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fx
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // type
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // notice
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WeatherEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSunrise(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHigh(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLow(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSunset(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAqi(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setYmd(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWeek(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFx(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNotice(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(WeatherEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(WeatherEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WeatherEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
