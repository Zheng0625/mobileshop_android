package com.huatec.edu.mobileshop.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.huatec.edu.mobileshop.db.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Integer> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Marjectkey = new Property(0, Integer.class, "marjectkey", true, "MARJECTKEY");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property Birth = new Property(4, String.class, "birth", false, "BIRTH");
        public final static Property Lastlogin = new Property(5, String.class, "lastlogin", false, "LASTLOGIN");
        public final static Property Registerdate = new Property(6, String.class, "registerdate", false, "REGISTERDATE");
        public final static Property Sex = new Property(7, int.class, "sex", false, "SEX");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"MARJECTKEY\" INTEGER PRIMARY KEY ," + // 0: marjectkey
                "\"USERNAME\" TEXT," + // 1: username
                "\"PASSWORD\" TEXT," + // 2: password
                "\"EMAIL\" TEXT," + // 3: email
                "\"BIRTH\" TEXT," + // 4: birth
                "\"LASTLOGIN\" TEXT," + // 5: lastlogin
                "\"REGISTERDATE\" TEXT," + // 6: registerdate
                "\"SEX\" INTEGER NOT NULL );"); // 7: sex
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Integer marjectkey = entity.getMarjectkey();
        if (marjectkey != null) {
            stmt.bindLong(1, marjectkey);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(5, birth);
        }
 
        String lastlogin = entity.getLastlogin();
        if (lastlogin != null) {
            stmt.bindString(6, lastlogin);
        }
 
        String registerdate = entity.getRegisterdate();
        if (registerdate != null) {
            stmt.bindString(7, registerdate);
        }
        stmt.bindLong(8, entity.getSex());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Integer marjectkey = entity.getMarjectkey();
        if (marjectkey != null) {
            stmt.bindLong(1, marjectkey);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(5, birth);
        }
 
        String lastlogin = entity.getLastlogin();
        if (lastlogin != null) {
            stmt.bindString(6, lastlogin);
        }
 
        String registerdate = entity.getRegisterdate();
        if (registerdate != null) {
            stmt.bindString(7, registerdate);
        }
        stmt.bindLong(8, entity.getSex());
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // marjectkey
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birth
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lastlogin
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // registerdate
            cursor.getInt(offset + 7) // sex
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setMarjectkey(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirth(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastlogin(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRegisterdate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(User entity, long rowId) {
        return entity.getMarjectkey();
    }
    
    @Override
    public Integer getKey(User entity) {
        if(entity != null) {
            return entity.getMarjectkey();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getMarjectkey() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
